package com.example.sample.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.sample.bean.School;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCHOOL".
*/
public class SchoolDao extends AbstractDao<School, Integer> {

    public static final String TABLENAME = "SCHOOL";

    /**
     * Properties of entity School.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property Pid = new Property(1, int.class, "pid", false, "PID");
        public final static Property Sname = new Property(2, String.class, "sname", false, "SNAME");
        public final static Property Cover_url = new Property(3, String.class, "cover_url", false, "COVER_URL");
    }

    private Query<School> city_SchoolsQuery;

    public SchoolDao(DaoConfig config) {
        super(config);
    }
    
    public SchoolDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHOOL\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"PID\" INTEGER NOT NULL ," + // 1: pid
                "\"SNAME\" TEXT," + // 2: sname
                "\"COVER_URL\" TEXT);"); // 3: cover_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHOOL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, School entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPid());
 
        String sname = entity.getSname();
        if (sname != null) {
            stmt.bindString(3, sname);
        }
 
        String cover_url = entity.getCover_url();
        if (cover_url != null) {
            stmt.bindString(4, cover_url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, School entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPid());
 
        String sname = entity.getSname();
        if (sname != null) {
            stmt.bindString(3, sname);
        }
 
        String cover_url = entity.getCover_url();
        if (cover_url != null) {
            stmt.bindString(4, cover_url);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public School readEntity(Cursor cursor, int offset) {
        School entity = new School( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // pid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // cover_url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, School entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setPid(cursor.getInt(offset + 1));
        entity.setSname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCover_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(School entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(School entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(School entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "schools" to-many relationship of City. */
    public List<School> _queryCity_Schools(int pid) {
        synchronized (this) {
            if (city_SchoolsQuery == null) {
                QueryBuilder<School> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Pid.eq(null));
                city_SchoolsQuery = queryBuilder.build();
            }
        }
        Query<School> query = city_SchoolsQuery.forCurrentThread();
        query.setParameter(0, pid);
        return query.list();
    }

}
